import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from io import BytesIO
import os
import sys
import asyncio


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token="7740433474:AAGMa_q92stKOJr5hcUFAn5E6C6Q9yR6wBw")
dp = Dispatcher(storage=MemoryStorage())
# –®–∞–±–ª–æ–Ω—ã —Ç–∞–±–ª–∏—Ü –∏ –∏—Ö –ø–æ–ª–µ–π
TABLE_TEMPLATES = {
    "classes": {
        "fields": {
            "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
            "name": "TEXT NOT NULL",
        },
        "followups": {
            "class_letter": {"field": "letter", "type": "TEXT"},
            "class_year": {"field": "year", "type": "INTEGER"},
        },
        "question_key": "classes",
    },
    "subjects": {
        "fields": {
            "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
            "name": "TEXT NOT NULL",
        },
        "followups": {
            "subject_short_name": {"field": "short_name", "type": "TEXT"},
        },
        "question_key": "subjects",
    },
    "teachers": {
        "fields": {
            "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
            "name": "TEXT NOT NULL",
        },
        "followups": {
            "teacher_name_format": {
                "field": "name_format",
                "type": "TEXT",
                "options": ["–ü–æ–ª–Ω–æ–µ –§–ò–û", "–§–∞–º–∏–ª–∏—è + –∏–Ω–∏—Ü–∏–∞–ª—ã"],
            },
        },
        "question_key": "teachers",
    },
    "classrooms": {
        "fields": {
            "id": "INTEGER PRIMARY KEY AUTOINCREMENT",
            "name": "TEXT NOT NULL",
        },
        "followups": {
            "classroom_type": {"field": "type", "type": "TEXT"},
        },
        "question_key": "classrooms",
    },
}

# –í–æ–ø—Ä–æ—Å—ã –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è
QUESTIONS = [
    {"text": "–ù—É–∂–Ω—ã –ª–∏ –∫–ª–∞—Å—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5–ê, 10–ë)?", "key": "classes"},
    {"text": "–ù—É–∂–Ω—ã –ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞)?", "key": "subjects"},
    {"text": "–ù—É–∂–Ω—ã –ª–∏ —É—á–∏—Ç–µ–ª—è?", "key": "teachers"},
    {"text": "–ù—É–∂–Ω—ã –ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–∫–∞–±–∏–Ω–µ—Ç—ã)?", "key": "classrooms"},
    {"text": "–ü—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å —É—á–∏—Ç–µ–ª–µ–π –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º?", "key": "link_teacher_subject"},
    {"text": "–£—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ (–ü–Ω-–ü—Ç)?", "key": "use_weekdays"},
]

# –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
FOLLOW_UPS = {
    "classes": [
        {"text": "–î–æ–±–∞–≤–ª—è—Ç—å –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5–ê)?", "key": "class_letter"},
        {"text": "–£—á–∏—Ç—ã–≤–∞—Ç—å —É—á–µ–±–Ω—ã–π –≥–æ–¥ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤?", "key": "class_year"},
    ],
    "subjects": [
        {"text": "–î–æ–±–∞–≤–ª—è—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–º–∞—Ç., —Ñ–∏–∑-—Ä–∞)?", "key": "subject_short_name"},
    ],
    "teachers": [
        {"text": "–•—Ä–∞–Ω–∏—Ç—å –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π) –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é + –∏–Ω–∏—Ü–∏–∞–ª—ã (–ò–≤–∞–Ω–æ–≤ –ê.–ê.)?",
         "key": "teacher_name_format", "options": ["–ü–æ–ª–Ω–æ–µ –§–ò–û", "–§–∞–º–∏–ª–∏—è + –∏–Ω–∏—Ü–∏–∞–ª—ã"]},
    ],
    "classrooms": [
        {"text": "–£–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è, —Å–ø–æ—Ä—Ç–∑–∞–ª –∏ —Ç.–¥.)?", "key": "classroom_type"},
    ],
}


@dp.message(Command("restart"))
async def cmd_restart(message: types.Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /restart"""
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    os.execv(sys.executable, ['python'] + sys.argv)

class Form(StatesGroup):
    waiting_for_answer = State()
    waiting_for_followup = State()


def create_yes_no_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="–î–∞"))
    builder.add(types.KeyboardButton(text="–ù–µ—Ç"))
    return builder.as_markup(resize_keyboard=True)


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîπ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é SQL-—Ñ–∞–π–ª.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.update_data(current_index=0, answers={})
    await ask_question(message, state)


async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_index", 0)

    if current_index < len(QUESTIONS):
        question = QUESTIONS[current_index]
        await state.update_data(current_question=question["key"])
        await message.answer(question["text"], reply_markup=create_yes_no_keyboard())
        await state.set_state(Form.waiting_for_answer)
    else:
        await generate_sql(message, state)


@dp.message(Form.waiting_for_answer)
async def handle_answer(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'", reply_markup=create_yes_no_keyboard())
        return

    data = await state.get_data()
    question_key = data["current_question"]
    answers = data.get("answers", {})

    answers[question_key] = message.text == "–î–∞"
    await state.update_data(answers=answers)

    if message.text == "–î–∞" and question_key in FOLLOW_UPS:
        await state.update_data(current_followup=0)
        await ask_followup(message, state)
    else:
        await state.update_data(current_index=data.get("current_index", 0) + 1)
        await ask_question(message, state)


async def ask_followup(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_key = data["current_question"]
    followup_index = data["current_followup"]
    followups = FOLLOW_UPS[question_key]

    if followup_index < len(followups):
        followup = followups[followup_index]
        await state.update_data(current_followup_key=followup["key"])

        if "options" in followup:
            builder = ReplyKeyboardBuilder()
            for option in followup["options"]:
                builder.add(types.KeyboardButton(text=option))
            await message.answer(followup["text"], reply_markup=builder.as_markup(resize_keyboard=True))
        else:
            await message.answer(followup["text"], reply_markup=create_yes_no_keyboard())

        await state.set_state(Form.waiting_for_followup)
    else:
        await state.update_data(current_index=data.get("current_index", 0) + 1)
        await ask_question(message, state)


@dp.message(Form.waiting_for_followup)
async def handle_followup(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_key = data["current_question"]
    followup_key = data["current_followup_key"]

    answers = data.get("answers", {})
    if f"{question_key}_followups" not in answers:
        answers[f"{question_key}_followups"] = {}

    current_followup = next((f for f in FOLLOW_UPS[question_key] if f["key"] == followup_key), None)

    if current_followup and "options" in current_followup:
        if message.text not in current_followup["options"]:
            builder = ReplyKeyboardBuilder()
            for option in current_followup["options"]:
                builder.add(types.KeyboardButton(text=option))
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö",
                                 reply_markup=builder.as_markup(resize_keyboard=True))
            return
        answers[f"{question_key}_followups"][followup_key] = message.text
    else:
        if message.text not in ["–î–∞", "–ù–µ—Ç"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'", reply_markup=create_yes_no_keyboard())
            return
        answers[f"{question_key}_followups"][followup_key] = message.text == "–î–∞"

    await state.update_data(
        answers=answers,
        current_followup=data.get("current_followup", 0) + 1
    )
    await ask_followup(message, state)


async def generate_sql(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    sql_script = "-- SQL-–±–∞–∑–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    for table_name, template in TABLE_TEMPLATES.items():
        if answers.get(template["question_key"]):
            sql_script += f"CREATE TABLE {table_name} (\n"

            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            for field, field_type in template["fields"].items():
                sql_script += f"    {field} {field_type},\n"

            # –£—Ç–æ—á–Ω—è—é—â–∏–µ –ø–æ–ª—è
            followups = answers.get(f"{template['question_key']}_followups", {})
            for followup_key, followup_config in template["followups"].items():
                if followups.get(followup_key):
                    field_name = followup_config["field"]
                    field_type = followup_config["type"]
                    sql_script += f"    {field_name} {field_type},\n"

            sql_script = sql_script.rstrip(",\n") + "\n);\n\n"

    # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π —É—á–∏—Ç–µ–ª—å-–ø—Ä–µ–¥–º–µ—Ç
    if answers.get("link_teacher_subject") and answers.get("teachers") and answers.get("subjects"):
        sql_script += """
CREATE TABLE teacher_subject (
    teacher_id INTEGER REFERENCES teachers(id),
    subject_id INTEGER REFERENCES subjects(id),
    PRIMARY KEY (teacher_id, subject_id)
);\n\n"""

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if answers.get("subjects") and answers.get("classes"):
        sql_script += """
CREATE TABLE schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    class_id INTEGER REFERENCES classes(id),
    subject_id INTEGER REFERENCES subjects(id)"""

        if answers.get("teachers"):
            sql_script += ",\n    teacher_id INTEGER REFERENCES teachers(id)"
        if answers.get("classrooms"):
            sql_script += ",\n    classroom_id INTEGER REFERENCES classrooms(id)"
        if answers.get("use_weekdays"):
            sql_script += ",\n    day_of_week INTEGER"

        sql_script += """,
    lesson_number INTEGER,
    start_time TIME,
    end_time TIME
);\n\n"""

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        sql_file = BytesIO(sql_script.encode('utf-8'))
        sql_file.seek(0)  # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–≤–æ–¥–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile
        input_file = types.BufferedInputFile(
            file=sql_file.read(),
            filename="school_timetable.sql"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        await message.answer_document(
            document=input_file,
            caption="–í–∞—à–∞ SQL-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        )
        await state.clear()

@dp.message(Command("restart"))
async def cmd_restart(message: types.Message):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    os.execv(sys.executable, [sys.executable] + sys.argv)

# 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
async def run_bot():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        await restart_bot()

async def restart_bot():
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    python = sys.executable
    os.execl(python, python, *sys.argv)

# 3. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /restart –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π KeyboardInterrupt
    while True:
        try:
            asyncio.run(run_bot())
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            continue