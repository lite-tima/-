import logging
import sqlite3
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)


from PyQt6.QtWidgets import (
    QApplication
)
import pytz
from datetime import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_SCHOOL, CHOOSING_CLASS, CONFIRM_DELETE = range(3)

# –ù–∞–∑–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
USER_DB = 'BD_TG_BOT.db'
SCHEDULE_DB = 'school_schedule.db'

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∫–æ–ª—ã
SCHOOLS = {
    "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π –õ–∏—Ü–µ–π ‚Ññ1 –∏–º. –°. –ó–∏–≥–∞–Ω—à–∏–Ω–∞": "üè´–ë–∞—à–∫–∏—Ä—Å–∫–∏–π –õ–∏—Ü–µ–π ‚Ññ1 –∏–º. –°. –ó–∏–≥–∞–Ω—à–∏–Ω–∞üè´"
}


def get_available_classes():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    conn = sqlite3.connect(SCHEDULE_DB)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT DISTINCT –ù–∞–∑–≤–∞–Ω–∏–µ FROM –ö–ª–∞—Å—Å—ã")
        classes = [row[0] for row in cursor.fetchall()]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É, –∑–∞—Ç–µ–º –ø–æ –±—É–∫–≤–µ
        classes.sort(key=lambda x: (int(''.join(filter(str.isdigit, x))),
                                    ''.join(filter(str.isalpha, x))))
        return classes
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
    finally:
        conn.close()


def init_user_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        school TEXT,
        class TEXT
    )
    ''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def is_user_registered(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    return result


def delete_user(user_id):
    """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.")

    if is_user_registered(user.id):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        reply_keyboard = [["–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–û—Å—Ç–∞–≤–∏—Ç—å"]]

        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ?",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CONFIRM_DELETE
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reply_keyboard = [[school] for school in SCHOOLS.values()]

        await update.message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —à–∫–æ–ª—É:',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_SCHOOL


async def school_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∫–æ–ª—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞"""
    user = update.message.from_user
    school = update.message.text

    if school not in SCHOOLS.values():
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=ReplyKeyboardMarkup(
                [[school] for school in SCHOOLS.values()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_SCHOOL

    context.user_data['school'] = school
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª —à–∫–æ–ª—É: {school}")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    available_classes = get_available_classes()

    if not available_classes:
        await update.message.reply_text(
            '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    classes_rows = [available_classes[i:i + 3] for i in range(0, len(available_classes), 3)]

    await update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞:',
        reply_markup=ReplyKeyboardMarkup(
            classes_rows,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )

    return CHOOSING_CLASS


async def class_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    user = update.message.from_user
    selected_class = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –µ—Å—Ç—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    available_classes = get_available_classes()
    if selected_class not in available_classes:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=ReplyKeyboardMarkup(
                [available_classes[i:i + 3] for i in range(0, len(available_classes), 3)],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_CLASS

    school = context.user_data['school']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, school, class) VALUES (?, ?, ?)",
        (user.id, school, selected_class)
    )
    conn.commit()
    conn.close()

    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.first_name}, —à–∫–æ–ª–∞ {school}, –∫–ª–∞—Å—Å {selected_class}")

    await update.message.reply_text(
        f'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n'
        f'üè´ –®–∫–æ–ª–∞: {school}\n'
        f'üìö –ö–ª–∞—Å—Å: {selected_class}\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = update.message.from_user
    choice = update.message.text

    if choice == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        delete_user(user.id)
        await update.message.reply_text(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /start",
            reply_markup=ReplyKeyboardRemove()
        )

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
    await update.message.reply_text(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")


async def send_schedule_update(context: ContextTypes.DEFAULT_TYPE, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()

        for user_id in users:
            try:
                await context.bot.send_message(
                    chat_id=user_id[0],
                    text=message
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
    finally:
        conn.close()


async def get_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.message.from_user.id

    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute("SELECT class FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    class_name = result[0]
    schedule = get_class_schedule(class_name)  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é

    await update.message.reply_text(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {class_name}:\n\n{schedule}")


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ main():


def get_class_schedule(class_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    conn = sqlite3.connect(SCHEDULE_DB)
    cursor = conn.cursor()

    try:
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
        result = []

        for day_num, day_name in enumerate(days):
            cursor.execute("""
                SELECT –£—Ä–æ–∫, –ü—Ä–µ–¥–º–µ—Ç, –£—á–∏—Ç–µ–ª—å, –ö–∞–±–∏–Ω–µ—Ç 
                FROM –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 
                WHERE –ö–ª–∞—Å—Å = ? AND –î–µ–Ω—å = ?
                ORDER BY –£—Ä–æ–∫
            """, (class_name, day_num + 1))

            lessons = cursor.fetchall()
            day_schedule = [f"üìÖ {day_name}:"]

            for lesson in lessons:
                lesson_num, subject, teacher, room = lesson
                day_schedule.append(
                    f"{lesson_num}. {subject} ({teacher}, –∫–∞–±. {room})"
                )

            result.append("\n".join(day_schedule))

        return "\n\n".join(result)

    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    finally:
        conn.close()


def main():
    import sys
    from Edit_Schedule import Edit_Schedule

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Qt
    app = QApplication(sys.argv)

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token("7740433474:AAGMa_q92stKOJr5hcUFAn5E6C6Q9yR6wBw").build()

    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    window = Edit_Schedule(bot_context=application)
    window.show()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    bot_thread = threading.Thread(target=application.run_polling, daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())


if __name__ == '__main__':
    main()