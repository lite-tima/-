import logging
import json  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ TG_BOT_SCHEDULE.py
import sqlite3
import requests
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_SCHOOL, CHOOSING_CLASS, CONFIRM_DELETE = range(3)

# –ù–∞–∑–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
USER_DB = 'BD_TG_BOT.db'
SCHEDULE_DB = 'school_schedule.db'

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∫–æ–ª—ã
SCHOOLS = {
    "–ë–∞—à–∫–∏—Ä—Å–∫–∏–π –õ–∏—Ü–µ–π ‚Ññ1 –∏–º. –°. –ó–∏–≥–∞–Ω—à–∏–Ω–∞": "üè´–ë–∞—à–∫–∏—Ä—Å–∫–∏–π –õ–∏—Ü–µ–π ‚Ññ1 –∏–º. –°. –ó–∏–≥–∞–Ω—à–∏–Ω–∞üè´"
}

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7740433474:AAGMa_q92stKOJr5hcUFAn5E6C6Q9yR6wBw"


# –í –∫–ª–∞—Å—Å NotificationHandler –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
class NotificationHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/notify':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)

            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()

            try:
                data = json.loads(post_data.decode('utf-8'))
                message = data['message']
                class_name = data.get('class_name')

                if class_name:
                    Thread(target=lambda: send_notification_to_class_users(class_name, message)).start()
                else:
                    Thread(target=lambda: send_notification_to_all_users(message)).start()

                self.wfile.write(json.dumps({"status": "success"}).encode())
            except Exception as e:
                logger.error(f"Notification error: {str(e)}")
                self.wfile.write(json.dumps({"status": "error"}).encode())

def get_user_ids_by_class(class_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    conn = sqlite3.connect(USER_DB)
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE class = ?", (class_name,))
        return [row[0] for row in cursor.fetchall()]
    finally:
        conn.close()

def send_notification_to_class_users(class_name, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    user_ids = get_user_ids_by_class(class_name)
    for user_id in user_ids:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                json={
                    "chat_id": user_id,
                    "text": message,
                    "parse_mode": "Markdown"
                },
                timeout=5
            )
        except Exception as e:
            logger.error(f"Failed to send to {user_id}: {str(e)}")

def run_notification_server():
    server = HTTPServer(('localhost', 8000), NotificationHandler)
    server.serve_forever()


def get_all_user_ids():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(USER_DB)
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        return [row[0] for row in cursor.fetchall()]
    finally:
        conn.close()


def send_notification_to_all_users(message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram API"""
    user_ids = get_all_user_ids()
    for user_id in user_ids:
        try:
            requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                json={
                    "chat_id": user_id,
                    "text": message,
                    "parse_mode": "Markdown"
                },
                timeout=5
            )
        except Exception as e:
            logger.error(f"Failed to send to {user_id}: {str(e)}")


def get_available_classes():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    conn = sqlite3.connect(SCHEDULE_DB)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT DISTINCT –ù–∞–∑–≤–∞–Ω–∏–µ FROM –ö–ª–∞—Å—Å—ã")
        classes = [row[0] for row in cursor.fetchall()]
        classes.sort(key=lambda x: (int(''.join(filter(str.isdigit, x))),
                                    ''.join(filter(str.isalpha, x))))
        return classes
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–æ–≤: {e}")
        return []
    finally:
        conn.close()


def init_user_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        school TEXT,
        class TEXT
    )
    ''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def is_user_registered(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() is not None
    conn.close()
    return result


def delete_user(user_id):
    """–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")

    if is_user_registered(user.id):
        reply_keyboard = [["–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–û—Å—Ç–∞–≤–∏—Ç—å"]]
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CONFIRM_DELETE
    else:
        reply_keyboard = [[school] for school in SCHOOLS.values()]
        await update.message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —à–∫–æ–ª—É:',
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_SCHOOL


async def school_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∫–æ–ª—ã"""
    user = update.message.from_user
    school = update.message.text

    if school not in SCHOOLS.values():
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=ReplyKeyboardMarkup(
                [[school] for school in SCHOOLS.values()],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_SCHOOL

    context.user_data['school'] = school
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –≤—ã–±—Ä–∞–ª —à–∫–æ–ª—É: {school}")

    available_classes = get_available_classes()
    if not available_classes:
        await update.message.reply_text(
            '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    classes_rows = [available_classes[i:i + 3] for i in range(0, len(available_classes), 3)]
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:',
        reply_markup=ReplyKeyboardMarkup(
            classes_rows,
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CHOOSING_CLASS


async def class_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    user = update.message.from_user
    selected_class = update.message.text
    available_classes = get_available_classes()

    if selected_class not in available_classes:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
            reply_markup=ReplyKeyboardMarkup(
                [available_classes[i:i + 3] for i in range(0, len(available_classes), 3)],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return CHOOSING_CLASS

    school = context.user_data['school']
    conn = sqlite3.connect(USER_DB)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, school, class) VALUES (?, ?, ?)",
        (user.id, school, selected_class)
    )
    conn.commit()
    conn.close()

    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.first_name}, —à–∫–æ–ª–∞ {school}, –∫–ª–∞—Å—Å {selected_class}")
    await update.message.reply_text(
        f'üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n'
        f'üè´ –®–∫–æ–ª–∞: {school}\n'
        f'üìö –ö–ª–∞—Å—Å: {selected_class}\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user = update.message.from_user
    choice = update.message.text

    if choice == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        delete_user(user.id)
        await update.message.reply_text(
            "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await update.message.reply_text(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    init_user_database()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = Thread(target=run_notification_server, daemon=True)
    server_thread.start()

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_SCHOOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, school_chosen)],
            CHOOSING_CLASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, class_chosen)],
            CONFIRM_DELETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_delete)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling()


if __name__ == '__main__':
    main()